services:
  broker:
    image: apache/kafka:latest
    hostname: broker
    container_name: broker
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - broker
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic new_user --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic payment --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
  db_orders:
    image: postgres:17.2-bookworm
    hostname: db-orders
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: "qwerty"
      PGDATA: "/var/lib/postgresql/data/pgdata"
#    volumes:
#      - db_order_data:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
  db_billings:
    image: postgres:17.2-bookworm
    hostname: db_billings
    ports:
      - 5433:5432
    environment:
      POSTGRES_PASSWORD: "qwerty"
      PGDATA: "/var/lib/postgresql/data/pgdata"
#    volumes:
#        - db_billing_data:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
  db_notifications:
    image: postgres:17.2-bookworm
    hostname: db_notifications
    ports:
      - 5434:5432
    environment:
      POSTGRES_PASSWORD: "qwerty"
      PGDATA: "/var/lib/postgresql/data/pgdata"
#    volumes:
#        - db_notification_data:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
  init-orders:
    image: "vparking-orders-update"
    build:
      context: .
      dockerfile: ./vparking-orders/Dockerfile-update-order
    environment:
      "ASPNETCORE_ENVIRONMENT": "Development"
      "PG_CONNECTION_SERVER": "db_orders"
      "PG_CONNECTION_PORT": "5432"
      "PG_CONNECTION_PASSWORD": "qwerty"
      "PG_CONNECTION_USER": "postgres"
      "PG_CONNECTION_DATABASE_NAME": "billing"
      "PG_ADMIN_PASSWORD": "qwerty"
    depends_on:
      db_orders:
        condition: service_healthy
  init-billings:
    image: "vparking-billing-update"
    build:
      context: .
      dockerfile: ./vparking-billing/Dockerfile-update
    environment:
      "ASPNETCORE_ENVIRONMENT": "Development"
      "PG_CONNECTION_SERVER": "db_billings"
      "PG_CONNECTION_PORT": "5432"
      "PG_CONNECTION_PASSWORD": "qwerty"
      "PG_CONNECTION_USER": "postgres"
      "PG_CONNECTION_DATABASE_NAME": "billing"
      "PG_ADMIN_PASSWORD": "qwerty"
    depends_on:
      db_billings:
        condition: service_healthy
    
      
  init-notifications:
    image: "vparking-notification-update"
    build:
      context: .
      dockerfile: ./vparking-notification/Dockerfile-update
    environment:
      "ASPNETCORE_ENVIRONMENT": "Development"
      "PG_CONNECTION_SERVER": "db_notifications"
      "PG_CONNECTION_PORT": "5432"
      "PG_CONNECTION_PASSWORD": "qwerty"
      "PG_CONNECTION_USER": "postgres"
      "PG_CONNECTION_DATABASE_NAME": "billing"
      "PG_ADMIN_PASSWORD": "qwerty"
    depends_on:
      db_notifications:
        condition: service_healthy
     
      
  order:
    image: "vparking-orders"
    ports:
      - 8080:8080
    build:
      context: .
      dockerfile: ./vparking-orders/Dockerfile-order
    environment:
      "ASPNETCORE_ENVIRONMENT": "Development"
      "PG_CONNECTION_SERVER": "db_orders"
      "PG_CONNECTION_PORT": "5432"
      "PG_CONNECTION_PASSWORD": "qwerty"
      "PG_CONNECTION_USER": "postgres"
      "PG_CONNECTION_DATABASE_NAME": "billing"
      "SWAGGER_PREFIX": "orders/swagger"
      "KAFKA_ADDRESS": "broker:9092"
      "KAFKA_TOPIC_NAME": "payment"
      "KAFKA_GROUP_ID": "vparking"
      BILLING_SERVICE_ADDRESS: "http://billing:8081"
    depends_on:
      init-orders:
        condition: service_completed_successfully
      broker:
        condition: service_healthy
  billing:
    image: "vparking-billing"
    build:
      context: .
      dockerfile: ./vparking-billing/Dockerfile
    ports:
      - 8081:8080
    environment:
      "ASPNETCORE_ENVIRONMENT": "Development"
      "PG_CONNECTION_SERVER": "db_billings"
      "PG_CONNECTION_PORT": "5432"
      "PG_CONNECTION_PASSWORD": "qwerty"
      "PG_CONNECTION_USER": "postgres"
      "PG_CONNECTION_DATABASE_NAME": "billing"
      "SWAGGER_PREFIX": "billing/swagger"
      "KAFKA_ADDRESS": "broker:9092"
      "KAFKA_TOPIC_NAME": "new_user"
      "KAFKA_GROUP_ID": "vparking"
    depends_on:
      init-billings:
        condition: service_completed_successfully
      broker:
        condition: service_healthy
  notification:
    image: "vparking-notification"
    build:
      context: .
      dockerfile: ./vparking-notification/Dockerfile
    ports:
      - 8082:8080
    environment:
      "ASPNETCORE_ENVIRONMENT": "Development"
      "PG_CONNECTION_SERVER": "db_notifications"
      "PG_CONNECTION_PORT": "5434"
      "PG_CONNECTION_PASSWORD": "qwerty"
      "PG_CONNECTION_USER": "postgres"
      "PG_CONNECTION_DATABASE_NAME": "billing"
      "SWAGGER_PREFIX": "notification/swagger"
      "KAFKA_ADDRESS": "broker:9092"
      "KAFKA_TOPIC_NAME": "payment"
      "KAFKA_GROUP_ID": "vparking"
    depends_on:
      init-notifications:
        condition: service_completed_successfully
      broker:
        condition: service_healthy
#volumes:
#  db_order_data: 
#      driver: local
#      driver_opts:
#        o: bind
#        type: volume
#        device: ./pgdata/orders
#  db_billing_data:
#      driver: local
#      driver_opts:
#        o: bind
#        type: volume
#        device: ./pgdata/billings
#  db_notification_data:
#      driver: local
#      driver_opts:
#        o: bind
#        type: volume
#        device: ./pgdata/notifications
    