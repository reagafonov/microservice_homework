# Default values for vparking-settings.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
commonTag: ""
image:
  repository: vparking-users
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.



# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: { }
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080
  targetPort: http
  name: http
   
  annotations: {
  }

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: "nginx"
  annotations: {
    kubernetes.io/ingress.class: nginx,
    nginx.ingress.kubernetes.io/auth-url: "https://keycloak.keycloak.svc.cluster.local/realms/vparking/protocol/openid-connect/userinfo",
    #nginx.ingress.kubernetes.io/auth-signin: "https://keycloak.keycloak.svc.cluster.local/realms/vparking/protocol/openid-connect/auth?client_id=vparking&scope=openid+email+profile&state=CE3E1035-601F-47A0-AB99-C7D7B8D17881&nonce=62C9F9EC-2A58-4885-950C-7A74E45238CF&response_type=code&redirect_uri=http://arch.homework/settings/health",
   # nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri",

    #nginx.ingress.kubernetes.io/auth-url: "http://oauth-oauth2-proxy.oauth2-proxy.svc.cluster.local/oauth2/auth",
    #nginx.ingress.kubernetes.io/auth-url: "http:/keycloak.keycloak.svc.cluster.local/realms/vparking/protocol/openid-connect/userinfo",
    #nginx.ingress.kubernetes.io/auth-url: "https:/vparking-settings.vparking.svc.cluster.local/users/auth",
    nginx.ingress.kubernetes.io/auth-response-headers: "x-auth-request-user, x-auth-request-email, authorization",
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k",
    nginx.ingress.kubernetes.io/auth-signin-redirect-param: "true"
    #nginx.ingress.kubernetes.io/auth-signin: "https://keycloak/auth-401"

  }
    # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: arch.homework
      paths:
        - pathRegexSuffix: /
          pathPrefix: /users
          pathType: Prefix
        
  tls: []
#    - secretName: nginx-ingress-nginx-admission
#      hosts:
#        - oauth2-proxy.oauth2-proxy.svc.cluster.local

metricIngress:
  enabled: true
  className: "nginx"
  annotations: {
    nginx.ingress.kubernetes.io/rewrite-target: /$1,
    kubernetes.io/ingress.class: nginx,
    nginx.ingress.kubernetes.io/use-regex: "true",
  }
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: arch.homework
      paths:
        - pathRegexSuffix: /(.*)
          pathPrefix: /metrics/db
          pathType: ImplementationSpecific
          serviceName: db-metrics
          port:
            number: 9187
  
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /users/health
    port: http
readinessProbe:
  httpGet:
    path: /users/health
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

dbAuth:
  username: "keycloak1"
  password: 9ZuzN0KZHl
  postgresPassword: "postgres"
  server: "db"

prometheus:
  release: "monitoring"
monitoring:
  enabled: false
  
keycloak:
  auth:
    user: user
    password: qwerty
  url: "http://keycloak.keycloak.svc.cluster.local"
  realm: vparking
  clientId: admin-cli
  namespace: keycloak
